@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider


<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Click Send to test the hub.

<span >@_num</span>
<button @onclick="async () => await Send(5)" disabled="@(!_hubIsConnected)">Send</button>

<SurveyPrompt Title="How is Blazor working for you?" />

@code{
   HubConnection? _hubConnection;
   bool _hubIsConnected => _hubConnection?.State == HubConnectionState.Connected;
   int _num = 0;

   protected override async Task OnInitializedAsync()
   {
      var tokenResult = await AccessTokenProvider.RequestAccessToken();
      if (tokenResult.TryGetToken(out var token))
      {
         try
         {
            _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/countingHub"), options =>
            {
               options.AccessTokenProvider = () => Task.FromResult(token?.Value);
            }).Build();

             _hubConnection.On<int>("ReceiveMessage", async (update) =>
             {
                _num = +update;
                StateHasChanged();
                await Send(_num + 10);
             });

             await _hubConnection.StartAsync();
         }
         catch (AccessTokenNotAvailableException exception)
         {
            exception.Redirect();
         }
         catch (Exception ex)
         {
             Debugger.Break();
         }
      }
   }

   private async Task Send(int clientUpdate)
   {
      if (_hubConnection is not null)
      {
         await _hubConnection.SendAsync("SendMessage", clientUpdate);
      }
   }

}